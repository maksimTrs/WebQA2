language: java

stages:
  - validate
  - test
  - report
  - deploy

jdk:
  - openjdk17

dist: focal

# Enhanced caching configuration
cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
    - $HOME/.m2/repository/
    - build/
  timeout: 1000

before_cache:
  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
  - rm -fr $HOME/.gradle/caches/*/fileHashes/
  - rm -fr $HOME/.gradle/caches/transforms-*

addons:
  chrome: stable
  apt:
    packages:
      - chromium-chromedriver
      - xvfb
      - unzip
      - libgconf-2-4

env:
  global:
    - GRADLE_OPTS="-Xmx4g -Xms1g -XX:MaxMetaspaceSize=512m -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4"
    - CHROME_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu --window-size=1920,1080"
    - _JAVA_OPTIONS="-Xmx4g -Xms1g"
    - ALLURE_VERSION="2.24.1"

# Validate environment variables
before_install:
  - |
    for var in GITHUB_TOKEN NOTIFICATION_EMAIL; do
      if [ -z "${!var}" ]; then
        echo "Error: $var is not set"
        travis_terminate 1
      fi
    done
  # Set up Chrome
  - export CHROME_BIN=/usr/bin/google-chrome
  # Set up display for UI tests
  - export DISPLAY=:99.0
  - sh -e /etc/init.d/xvfb start
  - sleep 3
  # Set up Gradle
  - chmod +x gradlew
  - ./gradlew --version
  # Install Allure
  - curl -o allure.zip -Ls https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.zip
  - unzip -q allure.zip -d /opt/
  - ln -s /opt/allure-${ALLURE_VERSION}/bin/allure /usr/local/bin/allure
  - allure --version

install:
  - ./gradlew assemble --no-daemon

before_script:
  # Verify installations
  - google-chrome-stable --version
  - chromedriver --version
  # Clear previous test results
  - rm -rf build/allure-results/*
  - rm -rf build/reports/*
  - rm -rf build/test-results/*
  - rm -rf build/jacoco/*

jobs:
  include:
    - stage: validate
      name: "Code Quality Checks"
      script:
        - ./gradlew checkstyleMain checkstyleTest spotlessCheck --no-daemon
    
    - stage: test
      name: "API Tests"
      script:
        - |
          timeout 30m ./gradlew test --tests "com.webqa.api.*" \
          -Dtest.profile=ci \
          -Ptest.tags="api" || travis_terminate 1
    
    - stage: test
      name: "UI Tests - Part 1"
      script:
        - |
          timeout 40m ./gradlew test --tests "com.webqa.ui.group1.*" \
          -Dwebdriver.chrome.driver=/usr/local/bin/chromedriver \
          -Dchrome.options="$CHROME_OPTIONS" \
          -Dtest.profile=ci || travis_terminate 1
    
    - stage: test
      name: "UI Tests - Part 2"
      script:
        - |
          timeout 40m ./gradlew test --tests "com.webqa.ui.group2.*" \
          -Dwebdriver.chrome.driver=/usr/local/bin/chromedriver \
          -Dchrome.options="$CHROME_OPTIONS" \
          -Dtest.profile=ci || travis_terminate 1

    - stage: report
      name: "Generate Reports"
      if: branch = master AND type != pull_request
      script:
        - ./gradlew jacocoTestReport
        - ./gradlew allureReport
        - allure generate build/allure-results --clean -o build/reports/allure-report

    - stage: deploy
      name: "Deploy Reports"
      if: branch = master AND type != pull_request AND env(TRAVIS_TEST_RESULT) = 0
      script:
        - skip # Deploy is handled by the deploy section

after_failure:
  # Archive test results and screenshots
  - if [ -d "build/reports" ]; then tar -czf reports.tar.gz build/reports; fi
  - if [ -d "build/allure-results" ]; then tar -czf allure-results.tar.gz build/allure-results; fi
  - if [ -d "build/test-results" ]; then tar -czf test-results.tar.gz build/test-results; fi
  - if [ -d "build/jacoco" ]; then tar -czf coverage-report.tar.gz build/jacoco; fi
  # Print test logs if available
  - if [ -d "build/reports/tests" ]; then cat build/reports/tests/**/*/test-results.log; fi

# Deploy configurations
deploy:
  # Deploy Allure reports to GitHub Pages
  - provider: pages
    strategy: git
    cleanup: false
    token: $GITHUB_TOKEN
    local_dir: build/reports/allure-report
    edge: true
    on:
      branch: master
      condition: $TRAVIS_TEST_RESULT = 0
  
  # Deploy coverage reports
  - provider: pages
    strategy: git
    cleanup: false
    token: $GITHUB_TOKEN
    local_dir: build/jacoco
    edge: true
    on:
      branch: master
      condition: $TRAVIS_TEST_RESULT = 0

notifications:
  email:
    recipients:
      - ${NOTIFICATION_EMAIL}
    on_success: change
    on_failure: always
  slack:
    rooms:
      - secure: ${SLACK_TOKEN}
    on_success: change
    on_failure: always
    template:
      - "Build <%{build_url}|#%{build_number}> of %{repository_slug}@%{branch}"
      - "Status: %{result} in %{duration}"
      - "Commit: <%{compare_url}|%{commit}> by %{author}"
      - "Message: %{commit_message}"
